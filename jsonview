<script setup lang="ts">
import { ref } from 'vue'
import { Delete, RefreshLeft } from '@element-plus/icons-vue'
import type { TreeNode } from '../types'

interface TreeNodeWithState extends TreeNode {
  children?: TreeNodeWithState[]
}

interface Props {
  data: TreeNodeWithState[]
}

const props = defineProps<Props>()
const emit = defineEmits<{
  (e: 'node-delete', node: TreeNode): void
}>()

const hoveredNode = ref<string | null>(null)
const deletedNodes = ref(new Set<string>())

const handleNodeDelete = (data: TreeNodeWithState) => {
  const collectNodeIds = (node: TreeNodeWithState): string[] => {
    const ids = [node.id]
    if (node.children) {
      node.children.forEach(child => {
        ids.push(...collectNodeIds(child))
      })
    }
    return ids
  }

  const nodeIds = collectNodeIds(data)
  nodeIds.forEach(id => deletedNodes.value.add(id))
  emit('node-delete', data)
}

const handleNodeRestore = (data: TreeNodeWithState) => {
  const collectNodeIds = (node: TreeNodeWithState): string[] => {
    const ids = [node.id]
    if (node.children) {
      node.children.forEach(child => {
        ids.push(...collectNodeIds(child))
      })
    }
    return ids
  }

  const nodeIds = collectNodeIds(data)
  nodeIds.forEach(id => deletedNodes.value.delete(id))
}

const isNodeDeleted = (id: string): boolean => {
  return deletedNodes.value.has(id)
}
</script>

<template>
  <el-tree
    :data="data"
    node-key="id"
    default-expand-all
  >
    <template #default="{ node, data }">
      <div
        class="custom-tree-node"
        @mouseenter="hoveredNode = data.id"
        @mouseleave="hoveredNode = null"
      >
        <span :class="{ 'deleted-node': isNodeDeleted(data.id) }">{{ data.label }}</span>
        <el-icon
          v-if="hoveredNode === data.id"
          :class="isNodeDeleted(data.id) ? 'restore-icon' : 'delete-icon'"
          @click.stop="isNodeDeleted(data.id) ? handleNodeRestore(data) : handleNodeDelete(data)"
        >
          <RefreshLeft v-if="isNodeDeleted(data.id)" />
          <Delete v-else />
        </el-icon>
      </div>
    </template>
  </el-tree>
</template>

<style scoped>
.custom-tree-node {
  flex: 1;
  display: flex;
  align-items: center;
  justify-content: space-between;
  padding-right: 8px;
}

.delete-icon {
  color: #ff4d4f;
  cursor: pointer;
  font-size: 16px;
  margin-left: 8px;
}

.delete-icon:hover {
  color: #ff7875;
}

.restore-icon {
  color: #52c41a;
  cursor: pointer;
  font-size: 16px;
  margin-left: 8px;
}

.restore-icon:hover {
  color: #73d13d;
}

.deleted-node {
  color: #999;
  text-decoration: line-through;
}
</style>
